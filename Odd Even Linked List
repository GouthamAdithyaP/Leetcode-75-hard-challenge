class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    public static ListNode deserialize(String data) {
        if (data == null || data.isEmpty() || data.equals("[]")) return null;
        // Remove brackets and split by comma
        String[] elements = data.substring(1, data.length() - 1).split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (String element : elements) {
            if (!element.isEmpty()) {
                current.next = new ListNode(Integer.parseInt(element.trim())); // trim to remove any leading/trailing spaces
                current = current.next;
            }
        }
        return dummy.next;
    }
}

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null || head.next.next == null) {
            return head; // No need to reorder if there are 0, 1, or 2 nodes
        }
        
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even; // Save the head of the even list
        
        // Move odd and even pointers alternately
        while (even != null && even.next != null) {
            odd.next = even.next; // Connect odd to the next odd node
            odd = odd.next; // Move odd pointer
            
            even.next = odd.next; // Connect even to the next even node
            even = even.next; // Move even pointer
        }
        
        // Connect the end of odd list to the head of even list
        odd.next = evenHead;
        
        return head;
    }
}
