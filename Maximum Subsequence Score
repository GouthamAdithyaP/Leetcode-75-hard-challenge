import java.util.PriorityQueue;
import java.util.Arrays;

class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        int[][] pairs = new int[n][2];
        
        for (int i = 0; i < n; i++) {
            pairs[i][0] = nums1[i];
            pairs[i][1] = nums2[i];
        }
        
        Arrays.sort(pairs, (a, b) -> b[1] - a[1]);
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);
        long sum = 0;
        long maxScore = 0;
        
        for (int i = 0; i < n; i++) {
            if (minHeap.size() < k) {
                minHeap.add(pairs[i][0]);
                sum += pairs[i][0];
            } else if (pairs[i][0] > minHeap.peek()) {
                sum += pairs[i][0] - minHeap.poll();
                minHeap.add(pairs[i][0]);
            }
            
            if (minHeap.size() == k) {
                maxScore = Math.max(maxScore, sum * pairs[i][1]);
            }
        }
        
        return maxScore;
    }
}
