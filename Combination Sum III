class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), k, n, 1, 0);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> curr, int k, int n, int start, int sum) {
        if (curr.size() == k && sum == n) {
            result.add(new ArrayList<>(curr));
            return;
        }

        if (curr.size() == k || sum > n) {
            return;
        }

        for (int i = start; i <= 9; i++) {
            curr.add(i);
            backtrack(result, curr, k, n, i + 1, sum + i);
            curr.remove(curr.size() - 1);
        }
    }
}
