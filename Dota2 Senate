import java.util.LinkedList;
import java.util.Queue;
class Solution {
    public String predictPartyVictory(String senate) {
        Queue<Integer> radiant = new LinkedList<>();
        Queue<Integer> dire = new LinkedList<>();
        int n = senate.length();
        for (int i = 0; i < n; i++) {
            if (senate.charAt(i) == 'R') {
                radiant.offer(i);
            } else {
                dire.offer(i);
            }
        }
        while (!radiant.isEmpty() && !dire.isEmpty()) {
            int radiantIndex = radiant.poll();
            int direIndex = dire.poll();
            
            // The senator who acts first will ban the opponent senator's right i
            if (radiantIndex < direIndex) {
                radiant.offer(radiantIndex + n); // Banned Radiant senator comes back after all current senators have
            } else {
                dire.offer(direIndex + n);
            }
        }
        
        return radiant.isEmpty() ? "Dire" : "Radiant"; // Return the winner based on remaining senators
    }
}
