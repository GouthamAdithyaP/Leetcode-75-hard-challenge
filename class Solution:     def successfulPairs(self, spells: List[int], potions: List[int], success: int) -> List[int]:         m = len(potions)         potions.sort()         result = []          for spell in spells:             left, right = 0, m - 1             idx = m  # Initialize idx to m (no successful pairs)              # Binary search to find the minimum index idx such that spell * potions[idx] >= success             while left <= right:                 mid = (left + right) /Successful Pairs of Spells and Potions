class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        m = len(potions)
        potions.sort()
        result = []

        for spell in spells:
            left, right = 0, m - 1
            idx = m  # Initialize idx to m (no successful pairs)

            # Binary search to find the minimum index idx such that spell * potions[idx] >= success
            while left <= right:
                mid = (left + right) // 2
                if spell * potions[mid] >= success:
                    idx = mid
                    right = mid - 1
                else:
                    left = mid + 1

            result.append(m - idx)

        return result
