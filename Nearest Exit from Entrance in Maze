from collections import deque

class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        m, n = len(maze), len(maze[0])
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        queue = deque([(entrance[0], entrance[1], 0)])  # (row, col, steps)
        visited = set([(entrance[0], entrance[1])])  # Mark entrance as visited
        
        while queue:
            row, col, steps = queue.popleft()
            if (row != entrance[0] or col != entrance[1]) and (row == 0 or row == m - 1 or col == 0 or col == n - 1):
                return steps
            for dx, dy in directions:
                new_row, new_col = row + dx, col + dy
                if 0 <= new_row < m and 0 <= new_col < n and maze[new_row][new_col] == '.' and (new_row, new_col) not in visited:
                    visited.add((new_row, new_col))
                    queue.append((new_row, new_col, steps + 1))
        
        return -1
