class Solution:
    def minFlips(self, a: int, b: int, c: int) -> int:
        flips = 0
        
        # We iterate until all bits of a, b, and c are processed
        while a > 0 or b > 0 or c > 0:
            # Extract the least significant bits
            bit_a = a & 1
            bit_b = b & 1
            bit_c = c & 1
            
            # If bit_c is 1, we need at least one of bit_a or bit_b to be 1
            if bit_c == 1:
                if bit_a == 0 and bit_b == 0:
                    flips += 1
            # If bit_c is 0, both bit_a and bit_b must be 0
            else:
                if bit_a == 1:
                    flips += 1
                if bit_b == 1:
                    flips += 1
            
            # Right shift all numbers to process the next bit
            a >>= 1
            b >>= 1
            c >>= 1
        
        return flips

# Example usage:
sol = Solution()
print(sol.minFlips(2, 6, 5))  # Output: 3
print(sol.minFlips(4, 2, 7))  # Output: 1
print(sol.minFlips(1, 2, 3))  # Output: 0
