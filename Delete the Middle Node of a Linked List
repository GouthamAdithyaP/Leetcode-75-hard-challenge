class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    
    // Deserialize method to convert string to linked list
    public static ListNode deserialize(String data) {
        if (data == null || data.isEmpty()) return null;
        // Remove brackets and split by comma
        String[] elements = data.substring(1, data.length() - 1).split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (String element : elements) {
            current.next = new ListNode(Integer.parseInt(element.trim())); // trim to remove any leading/trailing spaces
            current = current.next;
        }
        return dummy.next;
    }
}

class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if (head == null || head.next == null) {
            return null; // There is no middle node to delete
        }
        
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null; // To keep track of the previous node of slow
        
        // Move slow one step at a time and fast two steps at a time
        // When fast reaches the end of the list, slow will be at the middle
        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // Delete the middle node (slow) by adjusting pointers
        prev.next = slow.next;
        
        return head;
    }
}
